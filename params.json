{"name":"JournalTouch","tagline":"JournalTouch provides a touch-optimized interface for browsing current jounal tables of contents in Responsive Design. Fun!","body":"# About\r\n\r\nJournalTouch provides a touch-optimized interface for browsing current journal tables of contents in Responsive Design. Fun!\r\n\r\n# License\r\n\r\n@copyright 2014 MPI for Research on Collective Goods, Library\r\n\r\n@author Daniel Zimmel <zimmel@coll.mpg.de>\r\n\r\nLicense: http://www.gnu.org/licenses/gpl.html GPL version 3 or higher\r\n\r\n# Dependencies\r\n\r\n- PHP 5 ([http://www.php.net])\r\n- API key for JournalTocs ([http://www.journaltocs.ac.uk])\r\n\r\nalready included:\r\n\r\n- Foundation 5 [http://foundation.zurb.com]\r\n- jQuery 2+ [http://jquery.com]\r\n- simpleCart js [http://simplecartjs.org] **slightly modified**\r\n- Unveil.js [https://github.com/luis-almeida/unveil] for lazy loading\r\n- waypoints.js [https://github.com/imakewebthings/jquery-waypoints]\r\n- PHPMailer [https://github.com/PHPMailer/PHPMailer]\r\n\r\n\r\n# Live Demo\r\n\r\nTry here: http://www.coll.mpg.de/bib/jtdemo-public/\r\n\r\n# Installation & Setup\r\n\r\n## General\r\n\r\nThe main page is *index.php* and reads the relevant journals from *input/*. Put a CSV file in here. Alternatively, set up a Google Drive Spreadsheet and read it directly from the web.\r\nIt must at least contain the journal titles and a valid ISSN; configure optional columns in the *config/config.ini* (e.g. for filters). You can add any columns you like (extend the PHP classes).\r\n\r\n### Configure sources for the TOCs\r\n\r\nExternal (TOC) contents will be read from *index.php* with an AJAX call to *ajax/getCrossRefTOC.php* or *ajax/getJournalTOC.php*, respectively. This file outputs HTML to the caller which is ready to be inserted in *index.php* (Todo: make it more API-like). You will need a JournalTocs API key for the query (= your JournalTocs user e-mail). Set it in *config/config.ini*.\r\nIf you want to read from other sources, write a similar handler like *ajax/getJournalTOC.php*.\r\n\r\nBy default there are two queries; the first one queries the (experimental) CrossRef-API, and as a fallback option, there is a query to JournalTocs. To change this precedence and for more details refer to the corresponding ajax function in *js/local/conduit.js*. Error handling is as follows: any network (HTTP) problems will be handled in the Javascript ajax function (jQuery \"fail\" event). By default, if the frist query fails after five seconds, the first query gets canceled and the second query gets fired (change in *js/local/conduit.js*). Any other errors should be captured in the callers directly (*ajax/*).\r\n\r\nPlease note: while you could set up an alternative ISSN in the config.ini, it is ignored by now.\r\n\r\nFor example: \r\n\r\n*getCrossRefTOC.php*:\r\n\r\n    if (empty($toc)) {\r\n    /* write something we can read from our calling script */\r\n    echo '<span id=\"noTOC\"/>';\r\n    } \r\n\r\nhandle in *conduit.js*:\r\n\r\n\t\tif ($(returnData).filter('#noTOC').length > 0) {\r\n\t\t// ... fire a second event or write an error message...\r\n\t\t}\r\n\r\n### Checkout options\r\n\r\nCheckout options are handled in *checkout.php* and the imported classes.\r\n\r\nBe sure to set writing rights to *export/*.\r\n\r\n### User interaction\r\nUser interaction is handled in *js/local/conduit.js*.\r\n\r\n### Other notes\r\nImportant note for Excel CSV exports: expect problems if your file is not UTF-8 encoded! Excel does not export to UTF-8 by default.\r\n\r\n## Setup configuration file\r\n\r\nThe configuration is handled in *config/config.ini*.\r\nConfiguration parameters are grouped and will be read in the PHP classes as a multidimensional array. For details refer to the PHP documentation for parse_ini_file().\r\n\r\n**Example: read a configuration variable into the construct function in some class**\r\n\r\n        $config = parse_ini_file('config/config.ini', TRUE);\r\n        $this->csv_col_title = $config['csv']['title'];\r\n\r\n## Touch devices\r\n\r\nSee the examples for special touchscreen customization below in *Customization/Responsiveness*.\r\n\r\nThis webapp is reported to run sluggishly on touch devices running Chrome and Windows 8. On this system configuration, better use current versions of Internet Explorer or Firefox.\r\n\r\n# Usage\r\n\r\n## Maintaining journal updates\r\n\r\nThe input file feeds the journal list. Be careful if you change the structure of your CSV file (you may need to reconfigure the csv group in *config/config.ini*).\r\n\r\nOne of the not-so-trivial things is maintaining the marking of journals as \"recently updated\".\r\nThere is a basic experimental service that checks on new journal issues. It must be called separately (e.g. daily from a cronjob), and it works only if you have licensed access to the JournalTOCs Premium API. \r\nRun the service *services/getLatestJournals.php* (e.g. on a daily basis). It will output an array of ISSNs that are written to *input/latest-issns.json*. Adapt it to your needs. Currently, it runs a query to JournalTocs, compares the ISSNs with the existing file, and adds it to the file with the current calendar week (although the week is not used right now). Old weeks will be deleted. The output file will be read from *sys/class.ListJournals.php* in the function ``isCurrent()`` and add a 'new' marking to the journal array (which then you can read from index.php). \r\n\r\nConfigure the file and your custom JournalTOCs URL in *config/config.ini*.\r\n\r\nAlternatively, you could set up alerting services for yourself (e-mail, feeds...) and keep the input file up-to-date manually:\r\nfor the image slider (\"Current this week\") above the list or grid view (\"Orbit\") you will need to fill and update a special column (*config.ini*-default: *week*). Fill in the current calendar week when a new journal issue arrives; these journals will be displayed in the slider and get a special marking (default: \"new\" icon).\r\n\r\nThe default setting is that you can combine the two functions (automatic comparison and manual setting).\r\n\r\nPlease note: Orbit tends to slow things a lot on mobile devices if you have lots of images (any image will be preloaded by default). To change this, either do not use Orbit, or modify its source to implenent some sort of lazy loading.\r\n\r\nYou can configure a column (default: \"important\") to mark important journals (fill in what you like). \r\n\r\n## Cover images\r\n\r\nIf you have access to a cover service API, set the setting in *config/config.ini* to ``true``, and configure your service in *sys/class.ListJournals.php* (``getCover()``). \r\nBy default, cover images will be loaded from *img/*, if there exists an image file named after the ISSN (e.g. *0123-4567.png*). If not, a placeholder will be used (configure in *config/config.ini*).\r\n\r\nAll image content is preloaded from the input file. To make things load faster (e.g. on slow bandwith), the jQuery plugin unveil.js is loaded by default. The preload image is in the *img/*-directory and is called *lazyloader.gif*. The placeholder image must be set in the *src* attribute of the journal listing. The actual cover image must be placed in the attribute *data-src*. See the listing part in index.php.\r\n\r\n## PHP Classes\r\n\r\nThe following classes are required:\r\n\r\n*sys/class.CheckoutActions.php*\r\n\r\n*sys/class.GetUser.php*\r\n\r\n*sys/class.ListJournals.php*\r\n\r\nAccess the methods in these classes from *index.php* and *checkout.php*\r\n\r\n**Example: access the journals**\r\n\r\nsetup...\r\n\r\n\t\t\t\t require 'sys/class.ListJournals.php'; \r\n\t\t\t\t $lister = new ListJournals();\r\n\t\t\t\t $journals = $lister->getJournals();\r\n\r\n...and do something with it:\r\n\r\n\t\tforeach ($journals as $j) {\r\n\t\t\t   if (!empty($j['new'])) { \r\n\t\t\t\t     echo '<li data-orbit-slide=\"headline\">';\r\n\t\t\t\t     echo '<img class=\"issn getTOC\" id=\"'.$j['id'].'\" src=\"'.$j['img'].'\"/>';\r\n\t\t\t\t     echo '<div class=\"orbit-caption\">'.$j['title'].'</div>';\r\n\t\t\t\t     echo '</li>';\r\n\t\t\t   }\r\n\t\t}\r\n\r\n...this is handled in the method in *sys/class.ListJournals.php*\r\n\t\t\t \r\n\t\t\t function getJournals()\r\n\r\n**Example: set up the Mailer**\r\n\r\nsetup...\r\n\r\n\t\t\t\trequire 'sys/PHPMailer/PHPMailerAutoload.php';\r\n\t\t\t\t$email = new PHPMailer();\r\n\t\t\t\t$action = new CheckoutActions();\r\n\r\n...and send the mail...\r\n\r\n\t\t\t if($_POST && $_POST['mailer'])\r\n       {\r\n\t\t\t $action->sendArticlesAsMail($file, $email);\r\n\t\t\t }\r\n\r\n...this is handled in the method in *sys/class.CheckoutActions.php*\r\n\t\t\t \r\n\t\t\t function sendArticlesAsMail($file, $email)\r\n\r\n(do not forget to pass the ``PHPMailer()`` object, here ``$email``)\r\n\r\n# Getting the tables of contents\r\n\r\n*index.php* contains a class named ``.getTOC`` which will trigger the AJAX call to fetch the TOC and insert a HTML snippet. The action is handled in *js/local/conduit.js*.\r\n\r\n**Important!** Be careful when changing the HTML in the snippet! The DOM layout is essential for the jQuery functions to work as expected. If you need to make changes to the snippet, do not forget to change the jQuery selectors in *js/local/conduit.js* as well.\r\n\r\n# Basket functionality\r\n\r\nThe basket is completely written in Javascript. For configuration, refer to the [simpleCart-JS documentation](http://simplecartjs.org).\r\n\r\nBasic configuration is in *index.php*. The CSS classes and IDs for the\r\narticles (``item_*``) need to exist in the HTML snippet that includes the table of contents (*ajax/getJournalTOC.php*).\r\nActions for adding/removing/displaying the basket are handled in *js/local/conduit.js*.\r\n\r\n# Checkout options \r\n\r\nThe default checkout main file is *checkout.php*. The click actions are configured in *js/local/conduit.js*.\r\n\r\nThe text for E-Mail notifications is configured in *config/config.ini*.\r\n\r\nPlease note: the current mixing of GET/POST and jQuery bits is chaotic. Beware of bugs. Please rewrite.\r\n\r\n## Export directory\r\n\r\nBy default, a time-hashed file will be written to *export/* on calling *checkout.php* (``$action->saveArticlesAsCSV($mylist);``). \r\n**These files will not be deleted by default** (extend the given methods to achieve this).\r\n\r\n## Mailer\r\n\r\nMailing service configuration happens with PHPMailer. Configure your mail preferences in *config/config.ini*.\r\n\r\nBy default, mailing is only possible for user accounts registered at a given host. Set the *domain* in the mailer group in *config/config.ini*. The users only put in their user names.\r\nFor an alternative behavior, or if you want to allow free input, change the function ``sendArticlesAsMail()`` in *sys/classCheckoutActions.php*.\r\n\r\nIf you want to offer a predefined list of allowed user mail accounts, set the option *userlist* to *true* in *config/config.ini*, and set up a function in *sys/class.GetUsers.php*.\r\nReturn an array of users. Get it for example from a database query (add a function to the class, see the example *class.GetUsers.php*).\r\n\r\n# Customization\r\n\r\n## Look and Feel\r\n\r\nBuilt with the Foundation HTML5 framework. Please refer to the [documentation](http://foundation.zurb.com/docs/).\r\n\r\nFor CSS customizations use *css/local.css* .\r\n\r\n### Responsiveness\r\n\r\nFoundation is a responsive design framework. It will adapt itself to different devices and screens. However, if you need more precise positionings and conditions, there are nice customization features.\r\nBy default, there is a common stylesheet (*css/local.css*), and another one for special media queries (*css/media.css*).\r\n\r\n**Example: insert a special CSS for large screens (e.g. larger buttons for large touchscreens)**\r\n\r\nadd the following media query to the stylesheet *media.css*:\r\n\r\n\t\t@media only screen and (min-width: 85.063em) {\t\r\n     ...CSS goes here...\r\n    }\r\n\r\n\r\n**Example: Hide some elements for small screens**\r\n\r\n    <span class=\"hide-for-small\">This element will be hidden on small screens</span>\r\n\r\nRefer to the [Foundation Visibility classes](http://foundation.zurb.com/docs/components/visibility.html).\r\n\r\n### Orbit Slider Configuration \r\n\r\nOrbit is an image slider shipped with Foundation. By default, it is inactive. It could be used to display most recent journal updates, or any other stuff you want to highlight. If you like fancy,\r\nconfigure the image slider directly in index.php.\r\n\r\n**Example: change setting**\r\n\r\n     <ul id=\"myorbit\" data-orbit data-options=\"animation_speed: 1000;timer_speed: 2000;animation: 'fade';bullets: false\">\r\n\r\nFor all available options refer to the [Foundation Orbit Documentation](http://foundation.zurb.com/docs/components/orbit.html).\r\n\r\n### Screensaver function\r\n\r\nIf you want a screensaver functionality, change the text in the *#screensaver*-div in *index.php*, and check out the function in *js/local/conduit.js*, which loads a block after a click/touch timeout.\r\nBy default it is only active on large screens (see CSS in *css/media.css*).\r\n\r\n### Dynamic Alphabet\r\n\r\nOn scrolling, the current letter will be highlighted (*#letterbox* is appended dynamically via jQuery). For configuration, see *js/local/conduit.js*. For this to work, be sure to have the *waypoints.min.js*-Plugin included in your *index.php*.\r\n\r\n## Icons\r\n\r\nDefault for an unified look are the Foundation icons [Foundation-Icons](http://zurb.com/playground/foundation-icon-fonts-3). \r\n\r\n**Example: insert a star icon**\r\n\r\n\t\t\t\t<i class=\"fi-star\"></i>\r\n\r\n## Filter\r\n\r\nYou can use the entries in a CSV column of your input file as filters. Set the column and filters in *config/config.ini*, group csv. \r\nComment out the filter value in the csv group if you do not have/want filters.\r\nPlease note: anything in the \"important\" col. will get the special CSS-ID \"topJ\" (see\r\n*sys/class.ListJournals.php*). The other column contents will be added as CSS-IDs to the DOM.\r\n\r\nFilters will show up in the heading section of *index.php*, and their behavior on click is handled in *js/local/conduit.js*.\r\n\r\n## Export options\r\n\r\nExport for citation management software currently is very basic. To be\r\nable to digest heterogenous data from different sources (CrossRef,\r\nJournalTOCs...), some essential metadata fields should be normalized already\r\n in the TOC snippet (*ajax/get...*). \r\n\r\nWhen a user clicks on the basket checkout, a csv file will automatically be generated in *export/*. The function is in *sys/class.CheckoutActions.php*: ``saveArticlesAsCSV($mylist)``. When a user wants to export data, all fields will be read from this csv file. Write your mapping into an export function. For example, see the\r\nfunction ``saveArticlesAsEndnote()``.\r\n\r\nCaveat: in the current implementation, mapping of the metadata is limited to the given *simpleCart* fields (``item_name``, ``item_link``, ``item_options_``), and will be re-read from the source string when exporting. This is by no means a clean implementation. It would be better to modify the *simpleCart* js for a cleaner mapping (it is not really a mapping right now). (TODO)\r\n\r\n# Android Hints\r\n\r\nTo port it to a native mobile environment, you can use Apache Cordova / PhoneGap.\r\nFor details on the setup see README.Android.md\r\n\r\n# Admin Module\r\n\r\nThere is no administration module.\r\nA comfortable way is using the Google Drive API for managing the Spreadsheet data; just publish it on the web and read the file directly from Google Drive. Set in *config/config.ini*.\r\n\r\n# TODO\r\n\r\nMake *ajax/get...TOC.php* more flexible (rewrite as a single class)\r\n\r\nMore reliable integration of hotness\r\n\r\nWrap in Cordova iOS\r\n\r\nAuthentication/Personalization\r\n\r\nCover API integration\r\n\r\nAdmin Module for manipulating the CSV file if you do not want to use Google Drive or set a local solution (Excel including hassles).\r\n\r\nCleanup/Rewrite Checkout (GET/POST handling is a bit chaotic)\r\n\r\nMapping for export (extend simpleCart.js)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}